import os
import csv
import logging
from threading import Thread
from flask import Flask, request, jsonify
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TOKEN = os.environ.get(8037269369:AAEmzmdMCtnVIan6lRHe9CLTjJsbdH4cMYg)  # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_CHAT_ID = os.environ.get(7771936325)  # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBAPP_URL = "https://mihailnest.github.io/telegram-mini-app/"  # –í–∞—à URL

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CODE, AMOUNT = range(2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
users = {}
codes = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== FLASK API =====
app = Flask(__name__)

@app.route('/check-code')
def check_code():
    code = request.args.get('code', '')
    
    if code in codes:
        return jsonify({
            "valid": True,
            "amount": codes[code]
        })
    return jsonify({"valid": False})

@app.route('/record-win', methods=['POST'])
def record_win():
    data = request.json
    user_id = data.get('user_id')
    code = data.get('code')
    amount = data.get('amount')
    
    if user_id and code and amount:
        phone = users.get(int(user_id), {}).get("phone", "UNKNOWN")
        
        # –ó–∞–ø–∏—Å—å –≤ CSV
        with open('winners.csv', 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([phone, code, amount])
        
        return jsonify({"status": "success"})
    return jsonify({"status": "error"})

def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

# ===== –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====
def start(update: Update, context: CallbackContext):
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    update.message.reply_text(
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –Ω–∞ —É–¥–∞—á—É!\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )

def handle_contact(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    phone = update.message.contact.phone_number
    users[user_id] = {"phone": phone}
    
    keyboard = [[InlineKeyboardButton("üéÆ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É", web_app={"url": WEBAPP_URL})]]
    update.message.reply_text(
        "‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∏–≥—Ä—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def admin_start(update: Update, context: CallbackContext):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return ConversationHandler.END
    
    update.message.reply_text("‚öôÔ∏è –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")
    return CODE

def handle_code(update: Update, context: CallbackContext):
    code = update.message.text.strip()
    
    if len(code) != 4 or not code.isdigit():
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã")
        return CODE
    
    context.user_data['code'] = code
    update.message.reply_text("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞:")
    return AMOUNT

def handle_amount(update: Update, context: CallbackContext):
    try:
        amount = int(update.message.text)
        code = context.user_data['code']
        codes[code] = amount
        
        update.message.reply_text(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üîë –ö–æ–¥: {code}\n"
            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n\n"
            f"–¢–µ–ø–µ—Ä—å –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∏–≥—Ä–µ"
        )
        return ConversationHandler.END
    
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return AMOUNT

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

# ===== –ó–ê–ü–£–°–ö =====
def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Flask API –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.contact, handle_contact))
    
    # –î–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('admin', admin_start)],
        states={
            CODE: [MessageHandler(Filters.text & ~Filters.command, handle_code)],
            AMOUNT: [MessageHandler(Filters.text & ~Filters.command, handle_amount)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    dp.add_handler(conv_handler)

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    updater.idle()

if __name__ == "__main__":
    main()